#ifndef _FHT_REORDER_H_
#define _FHT_REORDER_H_

extern const uint8_t __attribute__((used)) _reorder_table[] PROGMEM = { 
240, 15,  // 11110000  00001111
248, 31,  // 11111000  00011111
244, 47,  // 11110100  00101111
252, 63,  // 11111100  00111111
242, 79,  // 11110010  01001111
250, 95,  // 11111010  01011111
246,111,  // 11110110  01101111
254,127,  // 11111110  01111111
241,143,  // 11110001  10001111
249,159,  // 11111001  10011111
245,175,  // 11110101  10101111
253,191,  // 11111101  10111111
243,207,  // 11110011  11001111
251,223,  // 11111011  11011111
247,239,  // 11110111  11101111
224,  7,  // 11100000  00000111
232, 23,  // 11101000  00010111
228, 39,  // 11100100  00100111
236, 55,  // 11101100  00110111
226, 71,  // 11100010  01000111
234, 87,  // 11101010  01010111
230,103,  // 11100110  01100111
238,119,  // 11101110  01110111
225,135,  // 11100001  10000111
233,151,  // 11101001  10010111
229,167,  // 11100101  10100111
237,183,  // 11101101  10110111
227,199,  // 11100011  11000111
235,215,  // 11101011  11010111
208, 11,  // 11010000  00001011
216, 27,  // 11011000  00011011
212, 43,  // 11010100  00101011
220, 59,  // 11011100  00111011
210, 75,  // 11010010  01001011
218, 91,  // 11011010  01011011
214,107,  // 11010110  01101011
222,123,  // 11011110  01111011
209,139,  // 11010001  10001011
217,155,  // 11011001  10011011
213,171,  // 11010101  10101011
221,187,  // 11011101  10111011
211,203,  // 11010011  11001011
192,  3,  // 11000000  00000011
200, 19,  // 11001000  00010011
196, 35,  // 11000100  00100011
204, 51,  // 11001100  00110011
194, 67,  // 11000010  01000011
202, 83,  // 11001010  01010011
198, 99,  // 11000110  01100011
206,115,  // 11001110  01110011
193,131,  // 11000001  10000011
201,147,  // 11001001  10010011
197,163,  // 11000101  10100011
205,179,  // 11001101  10110011
176, 13,  // 10110000  00001101
184, 29,  // 10111000  00011101
180, 45,  // 10110100  00101101
188, 61,  // 10111100  00111101
178, 77,  // 10110010  01001101
186, 93,  // 10111010  01011101
182,109,  // 10110110  01101101
190,125,  // 10111110  01111101
177,141,  // 10110001  10001101
185,157,  // 10111001  10011101
181,173,  // 10110101  10101101
160,  5,  // 10100000  00000101
168, 21,  // 10101000  00010101
164, 37,  // 10100100  00100101
172, 53,  // 10101100  00110101
162, 69,  // 10100010  01000101
170, 85,  // 10101010  01010101
166,101,  // 10100110  01100101
174,117,  // 10101110  01110101
161,133,  // 10100001  10000101
169,149,  // 10101001  10010101
144,  9,  // 10010000  00001001
152, 25,  // 10011000  00011001
148, 41,  // 10010100  00101001
156, 57,  // 10011100  00111001
146, 73,  // 10010010  01001001
154, 89,  // 10011010  01011001
150,105,  // 10010110  01101001
158,121,  // 10011110  01111001
145,137,  // 10010001  10001001
128,  1,  // 10000000  00000001
136, 17,  // 10001000  00010001
132, 33,  // 10000100  00100001
140, 49,  // 10001100  00110001
130, 65,  // 10000010  01000001
138, 81,  // 10001010  01010001
134, 97,  // 10000110  01100001
142,113,  // 10001110  01110001
112, 14,  // 01110000  00001110
120, 30,  // 01111000  00011110
116, 46,  // 01110100  00101110
124, 62,  // 01111100  00111110
114, 78,  // 01110010  01001110
122, 94,  // 01111010  01011110
118,110,  // 01110110  01101110
 96,  6,  // 01100000  00000110
104, 22,  // 01101000  00010110
100, 38,  // 01100100  00100110
108, 54,  // 01101100  00110110
 98, 70,  // 01100010  01000110
106, 86,  // 01101010  01010110
 80, 10,  // 01010000  00001010
 88, 26,  // 01011000  00011010
 84, 42,  // 01010100  00101010
 92, 58,  // 01011100  00111010
 82, 74,  // 01010010  01001010
 64,  2,  // 01000000  00000010
 72, 18,  // 01001000  00010010
 68, 34,  // 01000100  00100010
 76, 50,  // 01001100  00110010
 48, 12,  // 00110000  00001100
 56, 28,  // 00111000  00011100
 52, 44,  // 00110100  00101100
 32,  4,  // 00100000  00000100
 40, 20,  // 00101000  00010100
 16,  8,};// 00010000  00001000


static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
  "push r2 \n"    // save R2 on to the stack
  "push r3 \n"    // save R3 on to the stack
  "push r6 \n"    // save R6 on to the stack
  "push r7 \n"    // save R7 on to the stack  
  "push r28 \n"   // save R28 on to the stack
  "push r29 \n"   // save R29 on to the stack
  );

  // move values to bit reversed locations
  asm volatile (
  "ldi r30, lo8(_reorder_table) \n" // load ptr to address of _reorder_table[0] into R30 (ZL)
  "ldi r31, hi8(_reorder_table) \n" // load ptr to address of _reorder_table[1] into R30 (ZL)
  "ldi r20, " STRINGIFY((NFHT/2) - _R_V) " \n" // R20 = 128 - 8 = 120

  // get source sample
  "1: \n"
  "lpm r26,z+ \n" // load data from memory location in ZL into R26 and increment pointer in Z
  "clr r27 \n"                      // R27 = 0
  "lsl r26 \n"                      // R26 = R26 << 1 ; C = bit 7 of R26
  "rol r27 \n"                      // R27 = R27 << 1 + C ; C = bit 7 of R27
  "subi r26, lo8(-(fht_input)) \n"  // R26 = R26 - (-fht_input & 0x00FF)
  "sbci r27, hi8(-(fht_input)) \n"  // R27 = R27 - (-fht_input & 0xFF00)
  "ld r2,x+ \n" // load lower byte pointed to by Z
  "ld r3,x \n"  // load higher byte pointed to by Z

  // find destination
  "lpm r28,z+ \n" // R28 = ZH; Z = Z+1 ; load data from SRAM
  "clr r29 \n" // same here
  "lsl r28 \n" // multiply offset by 2
  "rol r29 \n"
  "subi r28, lo8(-(fht_input)) \n" // add pointer to offset
  "sbci r29, hi8(-(fht_input)) \n"
  "ld r6,y \n" // fetch destination
  "ldd r7,y+1 \n"

  // swap source and destination samples
  "st x,r7 \n"
  "st -x,r6 \n"
  "st y,r2 \n"
  "std y+1,r3 \n"

  // check if done
  "dec r20 \n" // go to next sample
  "brne 1b \n" // finish off if last sample
  : :
  : "r20", "r26", "r27", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
  "pop r29 \n"
  "pop r28 \n"
  "pop r7 \n"
  "pop r6 \n"
  "pop r3 \n"
  "pop r2 \n"
  );
}

#endif
